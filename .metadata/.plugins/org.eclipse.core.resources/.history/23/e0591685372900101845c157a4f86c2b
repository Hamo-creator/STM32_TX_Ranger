/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "dma.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

#include <stdbool.h>
#include "crsf.h"
#include "config.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

// Precomputed scaling factor
//#define MAP_SCALE   ((CRSF_DIGITAL_CHANNEL_MAX - CRSF_DIGITAL_CHANNEL_MIN) / (ADC_MAX - ADC_MIN)) // float if you want
//#define MAP_SCALE   (float)((CRSF_DIGITAL_CHANNEL_MAX - CRSF_DIGITAL_CHANNEL_MIN) / (float)(ADC_MAX - ADC_MIN)) // float if you want
//#define MAP_OFFSET  (CRSF_DIGITAL_CHANNEL_MIN)

#define MAP_SCALE_NUM   (CRSF_DIGITAL_CHANNEL_MAX - CRSF_DIGITAL_CHANNEL_MIN)
#define MAP_SCALE_DEN   (ADC_MAX - ADC_MIN)
#define MAP_OFFSET      (CRSF_DIGITAL_CHANNEL_MIN)


/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

uint16_t ADC_BUF[10];
#define ADC_MAX_VALUE      4095.0f
#define VREF               3.3f
#define VOLTAGE_DIVIDER_GAIN   (30.0f / 10.0f)  // 3.0

int Aileron_value = 0; // values read from the pot
int Elevator_value = 0;
int Throttle_value = 0;
int Rudder_value = 0;
int previous_throttle = 191;

int AUX1_Arm = 0; // switch values read from the digital pin
int AUX2_value = 0;
int AUX3_value = 0;
int AUX4_value = 0;

#define SMA_WINDOW_SIZE 8  // You can choose 4, 8, 16, 32...

uint16_t Aileron_samples[SMA_WINDOW_SIZE] = {0};
uint16_t Elevator_samples[SMA_WINDOW_SIZE] = {0};
uint16_t Throttle_samples[SMA_WINDOW_SIZE] = {0};
uint16_t Rudder_samples[SMA_WINDOW_SIZE] = {0};

uint8_t sample_index = 0;


float batteryVoltage;

const float warningVoltage = 3.4;
const float dangerVoltage = 3.1;

uint8_t crsfPacket[CRSF_PACKET_SIZE];
uint8_t crsfCmdPacket[CRSF_CMD_PACKET_SIZE];
int16_t rcChannels[CRSF_MAX_CHANNEL];
uint32_t crsfTime = 0;
uint32_t overFlowTime = 0x2000000;


int loopCount = 0;
int currentPktRate = 0;
int currentPower = 0;
int currentDynamic = 0;
int currentSetting = 0;
int stickMoved = 0;
int stickInt = 0;
uint32_t stickMovedMillis = 0;

uint32_t currentMillis = 0;

bool calStatus=false;


CRSF_State currentState = STATE_STARTUP;
uint8_t stateRepeatCount = 0;


/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void selectSetting() {
    // startup stick commands (rate/power selection / initiate bind / turn on tx module wifi)
    // Right stick:
    // Up Left - Rate/Power setting 1 (250hz / 100mw / Dynamic)
    // Up Right - Rate/Power setting 2 (50hz / 100mw)
    // Down Left - Start TX bind (for 3.4.2 it is now possible to bind to RX easily). Power cycle after binding
    // Down Right - Start TX module wifi (for firmware update etc)

    if (rcChannels[AILERON] < RC_MIN_COMMAND && rcChannels[ELEVATOR] > RC_MAX_COMMAND) { // Elevator up + aileron left
        currentPktRate = SETTING_1_PktRate;
        currentPower = SETTING_1_Power;
        currentDynamic = SETTING_1_Dynamic;
        currentSetting = 1;
    } else if (rcChannels[AILERON] > RC_MAX_COMMAND && rcChannels[ELEVATOR] > RC_MAX_COMMAND) { // Elevator up + aileron right
        currentPktRate = SETTING_2_PktRate;
        currentPower = SETTING_2_Power;
        currentDynamic = SETTING_2_Dynamic;
        currentSetting = 2;
    } else if (rcChannels[AILERON] < RC_MIN_COMMAND && rcChannels[ELEVATOR] < RC_MIN_COMMAND) { // Elevator down + aileron left
        currentSetting = 3;  // Bind
    } else if (rcChannels[AILERON] > RC_MAX_COMMAND && rcChannels[ELEVATOR] < RC_MIN_COMMAND) { // Elevator down + aileron right
        currentSetting = 4;  // TX Wifi
    } else {
        currentSetting = 0;
    }
}

bool checkStickMove(){
    // check if stick moved, warring after 10 minutes
    if(abs(previous_throttle - rcChannels[THROTTLE]) < 30){
        stickMoved = 0;
    }else{
        previous_throttle = rcChannels[THROTTLE];
        stickMovedMillis = HAL_GetTick();
        stickMoved = 1;
    }

    if (HAL_GetTick() - stickMovedMillis > STICK_ALARM_TIME){
        return true;
    }else{
        return false;
    }
}

// Map function
int32_t map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max) {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

static inline uint16_t fastMap(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
{
    return (uint16_t)(((uint32_t)(x - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min);
}

static inline uint16_t fastMap4095(uint16_t x, uint16_t out_min, uint16_t out_max)
{
    return (uint16_t)(((uint32_t)x * (out_max - out_min)) / 4095 + out_min);
}


// Constrain function
#define constrain(x, min, max) ((x) < (min) ? (min) : ((x) > (max) ? (max) : (x)))


uint32_t micros(void)
{
    return DWT->CYCCNT / (SystemCoreClock / 1000000);
}

#define ADC_TO_BATTERY_VOLTAGE_SCALE  ((VREF * VOLTAGE_DIVIDER_GAIN) / ADC_MAX_VALUE) // precomputed constant

float readBatteryVoltage(void)
{
    uint16_t adcRaw = ADC_BUF[4];
    return adcRaw * ADC_TO_BATTERY_VOLTAGE_SCALE;
}

//float readBatteryVoltage(void)
//{
//    uint16_t adcRaw = ADC_BUF[4];  // assuming A4 (ADC1_IN4) is stored at ADC_BUF[4]
//
//    float adcVoltage = (adcRaw / ADC_MAX_VALUE) * VREF;
//    float batteryVoltage = adcVoltage * VOLTAGE_DIVIDER_GAIN;
//    return batteryVoltage;
//}





/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC1_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */

  // Enable DWT Cycle Counter
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable access to DWT
  DWT->CYCCNT = 0;                                // Reset the counter
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable the cycle counter


  if (huart1.Instance == NULL) {
      // Error: UART not initialized
      Error_Handler();
  }

//  HAL_ADCEx_Calibration_Start(&hadc1);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC_BUF, 10);

  // inialize rc data
  for (uint8_t i = 0; i < CRSF_MAX_CHANNEL; i++) {
      rcChannels[i] = CRSF_DIGITAL_CHANNEL_MIN;
  }

  HAL_GPIO_WritePin(UART_LED_GPIO_Port, UART_LED_Pin, GPIO_PIN_SET);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  uint32_t currentMicros = micros();

	  // Handle micros() overflow
	  if (currentMicros < crsfTime - CRSF_TIME_BETWEEN_FRAMES_US) {
	      // We've had an overflow, reset the timing
	      crsfTime = currentMicros + CRSF_TIME_BETWEEN_FRAMES_US;
	  }

	  batteryVoltage = readBatteryVoltage();

	  if (batteryVoltage <= warningVoltage && batteryVoltage > dangerVoltage) {
	      HAL_GPIO_WritePin(GPIOC, BatVolWarning_Pin, GPIO_PIN_SET);
	      HAL_GPIO_WritePin(GPIOC, BatVolDanger_Pin, GPIO_PIN_RESET);
	  } else if (batteryVoltage < dangerVoltage) {
	      HAL_GPIO_WritePin(GPIOC, BatVolDanger_Pin, GPIO_PIN_SET);
	      HAL_GPIO_WritePin(GPIOC, BatVolWarning_Pin, GPIO_PIN_RESET);
	  } else {
	      HAL_GPIO_WritePin(GPIOC, BatVolWarning_Pin, GPIO_PIN_RESET);
	      HAL_GPIO_WritePin(GPIOC, BatVolDanger_Pin, GPIO_PIN_RESET);
	  }

	  // Store latest ADC readings into the buffer
	  Aileron_samples[sample_index]  = ADC_BUF[0];
	  Elevator_samples[sample_index] = ADC_BUF[1];
	  Throttle_samples[sample_index] = ADC_BUF[2];
	  Rudder_samples[sample_index]   = ADC_BUF[3];

	  // Advance sample index
	  sample_index++;
	  if (sample_index >= SMA_WINDOW_SIZE) sample_index = 0;

	  // Now, calculate the average for each stick
	  uint32_t aileron_sum = 0, elevator_sum = 0, throttle_sum = 0, rudder_sum = 0;

	  for (uint8_t i = 0; i < SMA_WINDOW_SIZE; i++) {
	      aileron_sum  += Aileron_samples[i];
	      elevator_sum += Elevator_samples[i];
	      throttle_sum += Throttle_samples[i];
	      rudder_sum   += Rudder_samples[i];
	  }

	  // Average
	  Aileron_value  = aileron_sum / SMA_WINDOW_SIZE;
	  Elevator_value = elevator_sum / SMA_WINDOW_SIZE;
	  Throttle_value = throttle_sum / SMA_WINDOW_SIZE;
	  Rudder_value   = rudder_sum / SMA_WINDOW_SIZE;

	  // After that, continue mapping like before (0-4095 to your range)
	  Aileron_value  = (int32_t)Aileron_value * (ADC_MAX - ADC_MIN) / 4095 + ADC_MIN;
	  Elevator_value = (int32_t)Elevator_value * (ADC_MAX - ADC_MIN) / 4095 + ADC_MIN;
	  Throttle_value = (int32_t)Throttle_value * (ADC_MAX - ADC_MIN) / 4095 + ADC_MIN;
	  Rudder_value   = (int32_t)Rudder_value * (ADC_MAX - ADC_MIN) / 4095 + ADC_MIN;

	  rcChannels[AILERON]  = fastMap4095(Aileron_value,  CRSF_DIGITAL_CHANNEL_MIN, CRSF_DIGITAL_CHANNEL_MAX);
	  rcChannels[ELEVATOR]  = fastMap4095(Elevator_value,  CRSF_DIGITAL_CHANNEL_MIN, CRSF_DIGITAL_CHANNEL_MAX);
	  rcChannels[THROTTLE]  = fastMap4095(Throttle_value,  CRSF_DIGITAL_CHANNEL_MIN, CRSF_DIGITAL_CHANNEL_MAX);
	  rcChannels[RUDDER]  = fastMap4095(Rudder_value,  CRSF_DIGITAL_CHANNEL_MIN, CRSF_DIGITAL_CHANNEL_MAX);


	  if (loopCount == 0) {
		  // Check if sticks are held in specific position on startup (bind/wifi/packet rate select)
		  selectSetting();
	  }

	  if (currentMicros > crsfTime){
		  if(loopCount <= 500){
			  CRSF_PrepareDataPacket(crsfPacket, rcChannels);
			  CRSF_WritePacket(crsfPacket, CRSF_PACKET_SIZE);
			  loopCount++;
		  }

		  if (loopCount > 500 && loopCount <= 505) { // repeat 5 packets to avoid bad packet, change rate setting
			  // Build commond packet
			  if (currentSetting == 1 || currentSetting == 2) {
				  CRSF_PrepareCmdPacket(crsfCmdPacket, ELRS_PKT_RATE_COMMAND, currentPktRate);
				  CRSF_WritePacket(crsfCmdPacket, CRSF_CMD_PACKET_SIZE);
			  } else if (currentSetting == 3) {
				  CRSF_PrepareCmdPacket(crsfCmdPacket, ELRS_BIND_COMMAND, ELRS_START_COMMAND);
				  CRSF_WritePacket(crsfCmdPacket, CRSF_CMD_PACKET_SIZE);
			  } else if (currentSetting == 4) {
				  CRSF_PrepareCmdPacket(crsfCmdPacket, ELRS_WIFI_COMMAND, ELRS_START_COMMAND);
				  CRSF_WritePacket(crsfCmdPacket, CRSF_CMD_PACKET_SIZE);
			  }
			  loopCount++;
		  } else if (loopCount > 505 && loopCount <= 510) { // repeat 5 packets to avoid bad packet, change TX power level
			  if (currentSetting == 1 || currentSetting == 2) {
				  CRSF_PrepareCmdPacket(crsfCmdPacket, ELRS_POWER_COMMAND, currentPower);
				  CRSF_WritePacket(crsfCmdPacket, CRSF_CMD_PACKET_SIZE);
			  }
			  loopCount++;
		  } else if (loopCount > 510 && loopCount <= 515) { // repeat 5 packets to avoid bad packet, change TX dynamic power setting
			  if (currentSetting == 1 || currentSetting == 2) {
				  CRSF_PrepareCmdPacket(crsfCmdPacket, ELRS_DYNAMIC_POWER_COMMAND, currentDynamic);
				  CRSF_WritePacket(crsfCmdPacket, CRSF_CMD_PACKET_SIZE);
			  }
			  loopCount++;
		  }

		  else {
			  CRSF_PrepareDataPacket(crsfPacket, rcChannels);
			  CRSF_WritePacket(crsfPacket, CRSF_PACKET_SIZE);
		  }

//		  HAL_GPIO_TogglePin(UART_LED_GPIO_Port, UART_LED_Pin);
	      crsfTime = currentMicros + CRSF_TIME_BETWEEN_FRAMES_US;
	  }

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 84;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
